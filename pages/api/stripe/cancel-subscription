import Stripe from "stripe";
import { createClient } from "@supabase/supabase-js";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.setHeader("Allow", "POST");
    return res.status(405).json({ error: "Method not allowed" });
  }

  // ✅ 1) Get user session from Supabase Auth
  const token = req.headers.authorization?.replace("Bearer ", "");

  const {
    data: { user },
    error: userError,
  } = await supabaseAdmin.auth.getUser(token);

  if (userError || !user) {
    return res.status(401).json({ error: "Unauthorized" });
  }

  // ✅ 2) Look up user's subscription ID from your DB
  const { data: profile, error: profileError } = await supabaseAdmin
    .from("profiles")
    .select("stripe_subscription_id")
    .eq("id", user.id)
    .single();

  if (profileError || !profile?.stripe_subscription_id) {
    return res.status(400).json({ error: "No subscription found for user" });
  }

  try {
    // ✅ 3) Cancel subscription in Stripe
    const deletedSubscription = await stripe.subscriptions.del(
      profile.stripe_subscription_id
    );

    // ✅ 4) Update is_premium = false in Supabase
    const { error: updateError } = await supabaseAdmin
      .from("profiles")
      .update({
        is_premium: false,
        stripe_subscription_id: null,
      })
      .eq("id", user.id);

    if (updateError) {
      console.error("Failed to update profile:", updateError);
    }

    return res
      .status(200)
      .json({ message: "Subscription canceled", subscription: deletedSubscription });
  } catch (error) {
    console.error("Error canceling subscription:", error);
    res.status(500).json({ error: error.message });
  }
}
